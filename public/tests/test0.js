// Generated by CoffeeScript 1.9.1

  var assert, chai, nfa;

  nfa = require('./NFA0.js');
  chai = require('chai');
  assert = chai.assert;


  describe("parsing", function() {
    it("Should parse NFA declarations", function() {
      var result;
      result = nfa.parse("NFA miNfa {(a)->(b);};");
      return assert.deepEqual(result.nodes.a.b, null);
    });
    it("Should parse NFA declarations with numeric links", function() {
      var result;
      result = nfa.parse("NFA miNfa {(a)-7->(b);};");
      return assert.deepEqual(result.nodes.a.b, "7");
    });
    it("Should parse NFA declarations with ID links", function() {
      var result;
      result = nfa.parse("NFA miNfa {(a)-c->(b);};");
      return assert.deepEqual(result.nodes.a.b, "c");
    });
    it("Should parse NFA declarations with two sided links", function() {
      var result;
      result = nfa.parse("NFA miNfa {(a)<-c->(b);};");
      assert.deepEqual(result.nodes.b.a, "c");
      return assert.deepEqual(result.nodes.a.b, "c");
    });
    it("Should parse NFA declarations with two sided epsylon links", function() {
      var result;
      result = nfa.parse("NFA miNfa {(a)<->(b);};");
      assert.deepEqual(result.nodes.b.a, null);
      return assert.deepEqual(result.nodes.a.b, null);
    });
    it("Should parse NFA declarations with final nodes", function() {
      var result;
      result = nfa.parse("NFA miNfa {(a)<-c->((b));};");
      assert.deepEqual(result.nodes.b.a, "c");
      assert.deepEqual(result.finals.b, true);
      assert.deepEqual(result.finals.a, undefined);
      return assert.deepEqual(result.nodes.a.b, "c");
    });
    it("Should detect error", function() {
      var result;
      try {
        result = nfa.parse("NFA miNfa {(a)<-c->(b)};");
        assert(false);
      }

        catch(error) {

        assert(true);
      }


      //assert.deepEqual(result.nodes.b.a, "c");
      //return assert.deepEqual(result.nodes.a.b, "c");
    });
});
